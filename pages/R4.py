#pages/R4.py
import streamlit as st
import pandas as pd
import gspread, json, os
from google.oauth2.service_account import Credentials
import streamlit as st
import hashlib
import secrets
from functools import wraps

def hash_password(password: str, salt: str) -> str:
    """Ìå®Ïä§ÏõåÎìú Ìï¥Ïã±"""
    return hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex()

def verify_password(password: str, hashed: str, salt: str) -> bool:
    """Ìå®Ïä§ÏõåÎìú Í≤ÄÏ¶ù"""
    return hash_password(password, salt) == hashed

def require_auth(func):
    """Ïù∏Ï¶ù Îç∞ÏΩîÎ†àÏù¥ÌÑ∞"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        if not st.session_state.get('authenticated', False):
            st.error("üîí Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
            
            password = st.text_input("Í¥ÄÎ¶¨Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏", type="password", key="auth_password")
            if st.button("Î°úÍ∑∏Ïù∏"):
                # Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ìï¥ÏãúÎêú Ìå®Ïä§ÏõåÎìúÏôÄ ÎπÑÍµê
                stored_hash = st.secrets.get("R4_PASSWORD_HASH", "")
                salt = st.secrets.get("R4_SALT", "")
                
                if stored_hash and verify_password(password, stored_hash, salt):
                    st.session_state.authenticated = True
                    st.session_state.auth_timestamp = time.time()
                    st.rerun()
                else:
                    st.error("‚ùå ÏûòÎ™ªÎêú ÎπÑÎ∞ÄÎ≤àÌò∏ÏûÖÎãàÎã§.")
            return
        
        # ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ Í≤ÄÏÇ¨ (30Î∂Ñ)
        if time.time() - st.session_state.get('auth_timestamp', 0) > 1800:
            st.session_state.authenticated = False
            st.error("üïê ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
            st.rerun()
            return
            
        return func(*args, **kwargs)
    return wrapper

@require_auth
def render() -> None:
    st.title("‚öôÔ∏è R4 Ï∞∏Í≥† (Spreadsheet Ìé∏Ïßë)")

    # Password check
    if "r4_auth" not in st.session_state:
        st.session_state.r4_auth = False
    correct = os.environ.get("R4PW") or st.secrets.get("R4PW", "")
    if not st.session_state.r4_auth:
        if st.text_input("ÎπÑÎ∞ÄÎ≤àÌò∏", type="password") == correct:
            st.session_state.r4_auth = True
            st.experimental_rerun()
        st.stop()

    # Google Sheets connection via service account JSON
    sa_json = os.environ.get("GCP_SERVICE_ACCOUNT_JSON") or st.secrets["GCP_SERVICE_ACCOUNT_JSON"]
    creds = Credentials.from_service_account_info(json.loads(sa_json))
    gc = gspread.authorize(creds)

    sheet_url = os.environ.get("GSHEETS_URL") or st.secrets["GSHEETS_URL"]
    ws = gc.open_by_url(sheet_url).worksheet("note")

    df = pd.DataFrame(ws.get_all_records())
    st.dataframe(df, use_container_width=True)

    # Add row
    st.markdown("---")
    st.subheader("Ìñâ Ï∂îÍ∞Ä")
    k_col, v_col = st.columns(2)
    with k_col: k = st.text_input("Key")
    with v_col: v = st.text_input("Value")
    if st.button("Ï∂îÍ∞Ä") and k:
        ws.append_row([k, v])
        st.success("Ï∂îÍ∞Ä ÏôÑÎ£å")
        st.experimental_rerun()

    # Delete row
    st.markdown("---")
    st.subheader("Ìñâ ÏÇ≠Ï†ú")
    idx = st.number_input("Ìñâ Î≤àÌò∏ (1Î∂ÄÌÑ∞)", min_value=1, max_value=len(df), value=1)
    if st.button("ÏÇ≠Ï†ú"):
        ws.delete_rows(int(idx))
        st.warning("ÏÇ≠Ï†ú ÏôÑÎ£å")
        st.experimental_rerun()
